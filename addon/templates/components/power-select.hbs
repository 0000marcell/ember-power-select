{{#basic-dropdown
  horizontalPosition=(readonly horizontalPosition)
  initiallyOpened=(readonly initiallyOpened)
  matchTriggerWidth=(readonly matchTriggerWidth)
  onClose=(action "onClose")
  onOpen=(action "onOpen")
  registerAPI=(action "registerAPI")
  renderInPlace=(readonly renderInPlace)
  triggerId=(readonly triggerId)
  verticalPosition=(readonly verticalPosition)
  as |dropdown|}}

  {{#dropdown.trigger
    ariaDescribedBy=(readonly ariaDescribedBy)
    ariaInvalid=(readonly ariaInvalid)
    ariaLabel=(readonly ariaLabel)
    ariaLabelledBy=(readonly ariaLabelledBy)
    ariaRequired=(readonly required)
    class=(readonly concatenatedTriggerClasses)
    disabled=(readonly disabled)
    onKeydown=(action "onTriggerKeydown")
    tabindex=(readonly tabindex)}}
    {{#component triggerComponent
      allowClear=(readonly allowClear)
      disabled=(readonly disabled)
      listboxId=(readonly optionsId)
      placeholder=(readonly placeholder)
      searchEnabled=(readonly searchEnabled)
      select=(readonly publicAPI)
      as |opt term|}}
      {{yield opt term}}
    {{/component}}

  {{/dropdown.trigger}}

  {{#dropdown.content
    class=(readonly concatenatedDropdownClasses)
    destination=(readonly destination)}}
    {{component beforeOptionsComponent
      listboxId=(readonly optionsId)
      onInput=(action "onInput")
      onKeydown=(action "onKeydown")
      searchEnabled=(readonly searchEnabled)
      select=(readonly publicAPI)}}
    {{#if mustShowSearchMessage}}
      <ul class="ember-power-select-options" role="listbox">
        <li class="ember-power-select-option ember-power-select-option--search-message" role="option">
          {{searchMessage}}
        </li>
      </ul>
    {{else if mustShowNoMessages}}
      {{#if (hasBlock "inverse")}}
        {{yield to="inverse"}}
      {{else if noMatchesMessage}}
        <ul class="ember-power-select-options" role="listbox">
          <li class="ember-power-select-option ember-power-select-option--no-matches-message" role="option">
            {{noMatchesMessage}}
          </li>
        </ul>
      {{/if}}
    {{else}}
      {{#component optionsComponent
        aria-controls=(readonly triggerId)
        class="ember-power-select-options"
        groupIndex=""
        loading=(readonly loading)
        loadingMessage=(readonly loadingMessage)
        id=(readonly optionsId)
        options=(readonly publicAPI.results)
        optionsComponent=(readonly optionsComponent)
        select=(readonly publicAPI)
        as |option term|}}
        {{yield option term}}
      {{/component}}
    {{/if}}
    {{component afterOptionsComponent select=(readonly publicAPI)}}
  {{/dropdown.content}}
{{/basic-dropdown}}
{{!-- {{#basic-dropdown
  horizontalPosition=(readonly horizontalPosition)
  initiallyOpened=(readonly initiallyOpened)
  matchTriggerWidth=(readonly matchTriggerWidth)
  onClose=(action "onClose")
  onOpen=(action "onOpen")
  renderInPlace=(readonly renderInPlace)
  verticalPosition=(readonly verticalPosition)
  registerAPI=(action (mut dropdown))
  triggerId=(readonly triggerId)
  as |dropdown|}}

  {{#dropdown.trigger
    ariaDescribedBy=(readonly ariaDescribedBy)
    ariaInvalid=(readonly ariaInvalid)
    ariaLabel=(readonly ariaLabel)
    ariaLabelledBy=(readonly ariaLabelledBy)
    ariaRequired=(readonly required)
    class=(readonly concatenatedTriggerClasses)
    disabled=(readonly disabled)
    onFocus=(action "handleFocus")
    onFocusIn=(action (mut hasFocusInside) true)
    onFocusOut=(action (mut hasFocusInside) false)
    onKeydown=(action "handleKeydown")
    tabindex=(readonly tabindex)}}

    {{#component triggerComponent
      allowClear=(readonly allowClear)
      buildSelection=(readonly buildSelection)
      disabled=(readonly disabled)
      extra=(readonly extra)
      handleInput=(action "handleInput")
      handleFocus=(action "handleFocus" dropdown)
      lastSearchedText=(readonly lastSearchedText)
      listboxId=(readonly optionsId)
      loading=(readonly loading)
      onkeydown=(readonly onkeydown)
      options=(readonly results)
      placeholder=(readonly placeholder)
      searchEnabled=(readonly searchEnabled)
      searchField=(readonly searchField)
      searchText=(readonly searchText)
      select=(readonly publicAPI)
      selected=(readonly resolvedSelected)
      selectedItemComponent=(readonly selectedItemComponent)
      as |opt term|}}

      {{yield opt term}}
    {{/component}}
  {{/dropdown.trigger}}

  {{#dropdown.content
    class=(readonly concatenatedDropdownClasses)
    destination=(readonly destination)
    onFocusIn=(action (mut hasFocusInside) true)
    onFocusOut=(action (mut hasFocusInside) false)}}
    {{component beforeOptionsComponent
      searchText=(readonly searchText)
      onkeydown=(readonly onkeydown)
      select=(readonly publicAPI)
      handleInput=(action "handleInput")
      searchPlaceholder=(readonly searchPlaceholder)
      searchEnabled=(readonly searchEnabled)
      highlighted=(readonly highlighted)
      listboxId=(readonly optionsId)
      extra=(readonly extra)
      eventSender=eventSender}}
    {{#if mustShowSearchMessage}}
      <ul class="ember-power-select-options" role="listbox"><li class="ember-power-select-option ember-power-select-option--search-message" role="option">{{searchMessage}}</li></ul>
    {{else if mustShowNoMessages}}
      {{#if (hasBlock "inverse")}}
        {{yield to="inverse"}}
      {{else if noMatchesMessage}}
        <ul class="ember-power-select-options" role="listbox"><li class="ember-power-select-option ember-power-select-option--no-matches-message" role="option">{{noMatchesMessage}}</li></ul>
      {{/if}}
    {{else}}
      {{#component optionsComponent
        allOptions=(readonly results)
        aria-controls=(readonly triggerId)
        class="ember-power-select-options"
        extra=(readonly extra)
        groupIndex=""
        highlighted=(readonly highlighted)
        id=(readonly optionsId)
        lastSearchedText=(readonly lastSearchedText)
        loading=(readonly loading)
        loadingMessage=(readonly loadingMessage)
        options=(readonly results)
        optionsComponent=(readonly optionsComponent)
        searchText=(readonly searchText)
        select=(readonly publicAPI)
        selected=(readonly resolvedSelected)
        as |option term|}}
        {{yield option term}}
      {{/component}}
    {{/if}}
    {{component afterOptionsComponent
      select=(readonly publicAPI)
      searchPlaceholder=(readonly searchPlaceholder)
      searchEnabled=(readonly searchEnabled)
      extra=(readonly extra)}}
  {{/dropdown.content}}
{{/basic-dropdown}} --}}