<section class="legacy-demo">
  <input type="text" value="sample input">
  <h2 id="title">Welcome to the demo of ember-power-select (provisional name)</h2>

  <p>
    Ok, this is a demo of an enriched select-like component that when finished will become a 1:1
    clone of the popular jQuery addon Select2.js
  </p>
  <p>
    "Why reinvent the wheel once more?", you may thing (and for good reason).
  </p>
  <p>
    For ember projects i've used the nice ember-select2 component, which is a ember addon that wraps
    the jquery library, giving it a nicer ember-ish interface.
    <br>
    The issue is that I've found the experience not entirely seamlessly when dealing with
    collection of records from ember data and other promises, and mainly, it was very hard
    to customize your component.
    <br>
    Not to mention that Select2.js alone is ~150KB, because it's bloated with things that doesn't
    belongs to the component itself, like i18n.
  </p>
  <p>
    I wanted to prove that using ember's primitives you can replicate 95% of the funcionality
    of the original library with a 5% of the code, and the resulting code is straightforward,
    the component nicer to use and can be customized much easier.
  </p>
  <p>
    Still things to polish, but soon will be usable.
  </p>
  <p>At the moment, all the funcionality you see took <strong>500 LOC</strong> (including CSS and templates)</p>

  <h4>Select of strings without value tracking. You can filter right away.</h4>
  <p>simpleSelected is: {{simpleSelected}}</p>

  {{#power-select options=(readonly moarNumbers) selected=(readonly simpleSelected) onchange=(action (mut simpleSelected)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select of strings with value tracking</h4>
  {{#power-select options=(readonly simpleOptions) selected=(readonly simpleSelected) onchange=(action (mut simpleSelected)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Diacritics search</h4>
  {{#power-select options=(readonly names) selected=diacriticName onchange=(action (mut diacriticName)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>If the default filter matches doesn't work, you can pass your own. This check that results end with the given string. Try searching for "teen"</h4>
  {{#power-select options=(readonly simpleOptions) matcher=endsWithMatcher selected=simpleOpt onchange=(action (mut simpleOpt)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>If the content of your selector cannot be initialized, you can pass an action to find the results your way. e.g. `search=(action "findStuff")`</h4>
  {{#power-select search=(action "search") selected=abracadabra onchange=(action (mut abracadabra)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>... and if that action needs to perform something async, just return a promise</h4>
  {{#power-select search=(action "asyncSearch") selected=foo onchange=(action (mut foo)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select with placeholder</h4>
  {{#power-select options=(readonly simpleOptions) placeholder="Please select a number" selected=bar onchange=(action (mut bar)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select clearable</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" allowClear=true selected=name2 onchange=(action (mut name2)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}

  <h4>Select multiple [WORK IN PROGRESS]</h4>
  {{#power-select options=(readonly simpleOptions) selected=multipleSelection multiple=true onchange=(action (mut multipleSelection)) as |option|}}
    {{option}}
  {{/power-select}}

  <p>Selected numbers: {{#each multipleSelection as |number|}}{{number}}, {{/each}}</p>

  <h4>Select multiple with placeholder</h4>
  {{#power-select options=simpleOptions selected=multipleFoo multiple=true placeholder="foo bar hey!" onchange=(action (mut multipleFoo)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Select multiple </h4>
  {{#power-select options=(readonly complexOptions) multiple=true searchField="name" selected=baz onchange=(action (mut baz)) as |option|}}
    <i class="icon-flag {{option.code}}"></i> {{option.name}}
  {{/power-select}}
  <p>Selected numbers: {{#each multipleSelection as |number|}}{{number}}, {{/each}}</p>

  <h4>Custom block. When your options are not strings, just customize the html of each option with a block</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" selected=(readonly complexSelected) onchange=(action (mut complexSelection)) as |option|}}
    <i class="icon-flag {{option.code}}"></i>
    {{option.name}}
    <i>Population: {{option.population}}</i>
  {{/power-select}}

  <h4>You can even use a different markup for the selected option and the ones in the list.</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" selected=(readonly complexSelected) selectedComponent="selected-country" onchange=(action (mut complexSelected)) as |option|}}
    <div class="country-detailed-info">
      <div class="country-flag {{option.code}}">
      </div>
      <div class="country-data-text">
        <strong>{{option.name}}</strong>
        <br>
        <small>Population in 2014: <i>{{option.population}}</i></small>
      </div>
    </div>
  {{/power-select}}

  <h4>Select disabled</h4>
  {{#power-select options=(readonly complexOptions) searchField="name" disabled=true selected=complexSelected onchange=(action (mut complexSelected)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}

  <h4>Select with disabled options</h4>
  {{#power-select options=(readonly complexOptionsWithDisabled) searchField="name" selected=complexSelected onchange=(action (mut complexSelected)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}

  <h4>Select that receives a promise as options</h4>
  {{#power-select options=(readonly promiseOptions) selected=optionOfPromise onchange=(action (mut optionOfPromise)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>You can customize the message shown while promise is not resolved with `loadingMessage="This promise takes 5 seconds to resolve"`</h4>
  {{#power-select options=(readonly promiseOptions) loadingMessage="This promise takes 5 seconds to resolve" selected=foobar onchange=(action (mut foobar)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>You can customize the text being shown when there is no matches passing `noResultsMessage="404 bro". Type "asdf"`</h4>
  {{#power-select options=(readonly simpleOptions) noResultsMessage="404 bro" selected=qux onchange=(action (mut qux)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Or you can pass any html in the `\{{else}}` block just like each</h4>
  {{#power-select options=(readonly simpleOptions) noResultsMessage="404 bro" selected=bar2 onchange=(action (mut bar2)) as |option|}}
    {{option}}
  {{else}}
    <img height="130" style="display: inline-block;" src="http://cliparts.co/cliparts/bpi/qdj/bpiqdjdc9.png">
    NO
    <br>
    <a href="#">Contact us to complain about this</a>
  {{/power-select}}

  <h4>Select with groups</h4>
  {{#power-select options=(readonly groupedOptions) selected=optionOfGroup onchange=(action (mut optionOfGroup)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Options are appended to the body, unless you pass `renderInPlace=true`</h4>
  {{#power-select options=(readonly simpleOptions) renderInPlace=true selected=simpleSelected2 onchange=(action (mut simpleSelected2)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>The search box can be disabled passing `searchEnabled=false`</h4>
  {{#power-select options=(readonly simpleOptions) searchEnabled=false selected=simpleSelected3 onchange=(action (mut simpleSelected3)) as |option|}}
    {{option}}
  {{/power-select}}

  <h4>Right to left styles</h4>
  {{#power-select options=(readonly complexOptions) dir="rtl" selected=(readonly complexSelected) allowClear=true onchange=(action (mut complexSelected)) as |option|}}
    {{option.code}}: {{option.name}}
  {{/power-select}}
  <br>
  {{#power-select options=(readonly groupedOptions) dir="rtl" selected=prefilledSelection onchange=(action (mut prefilledSelection)) allowClear=true as |option|}}
    {{option}}
  {{/power-select}}

  <br>
  <div style="align-items: center; display: flex; flex-direction: row">
    <span>Search By:</span>
    {{#power-select onchange=(action (mut searchKey)) options=searchTypes selected=searchKey as |type|}}
      {{type.label}}
    {{/power-select}}
  </div>

  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>

 </section>