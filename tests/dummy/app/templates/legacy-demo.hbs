<section class="legacy-demo">
  <input type="text" value="sample input">
  <h2 id="title">Welcome to the demo of ember-power-select (provisional name)</h2>
  <p>
    Ok, this is a demo of an enriched select-like component that when finished will become a 1:1
    clone of the popular jQuery addon Select2.js
  </p>
  <p>
    "Why reinvent the wheel once more?", you may thing (and for good reason).
  </p>
  <p>
    For ember projects i've used the nice ember-select2 component, which is a ember addon that wraps
    the jquery library, giving it a nicer ember-ish interface.
    <br>
    The issue is that I've found the experience not entirely seamlessly when dealing with
    collection of records from ember data and other promises, and mainly, it was very hard
    to customize your component.
    <br>
    Not to mention that Select2.js alone is ~150KB, because it's bloated with things that doesn't
    belongs to the component itself, like i18n.
  </p>
  {{#ember-power-select options=(readonly simpleOptions) selected=simpleSelected onchange=(action "debugSelection") as |option|}}
    {{option}}
  {{/ember-power-select}}
  <p>
    I wanted to prove that using ember's primitives you can replicate 95% of the funcionality
    of the original library with a 5% of the code, and the resulting code is straightforward,
    the component nicer to use and can be customized much easier.
  </p>
  <p>
    Still things to polish, but soon will be usable.
  </p>
  <p>At the moment, all the funcionality you see took <strong>500 LOC</strong> (including CSS and templates)</p>
  {{#ember-basic-dropdown matchTriggerWidth=true}}
    trigger!
  {{else}}
    <h3>Hey yo!</h3>
  {{/ember-basic-dropdown}}


  {{!--

  <h4>Select of strings without value tracking. You can filter right away.</h4>
  <p>simpleSelected is: {{simpleSelected}}</p>
  {{#ember-power-select options=(readonly simpleOptions) selected=(readonly simpleSelected) onchange=(action "debugSelection") as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>Select of strings with value tracking</h4>
  {{#ember-power-select options=(readonly simpleOptions) selected=(readonly simpleSelected) onchange=(action (mut simpleSelected)) as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>Diacritics search</h4>
  {{#ember-power-select options=(readonly names) as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>If the default filter matches doesn't work, you can pass your own. This check that results end with the given string. Try searching for "teen"</h4>
  {{#ember-power-select options=(readonly simpleOptions) matcher=endsWithMatcher as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>If the content of your selector cannot be initialized, you can pass an action to find the results your way. e.g. `search=(action "findStuff")`</h4>
  {{#ember-power-select search=(action "search") as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>... and if that action needs to perform something async, just return a promise</h4>
  {{#ember-power-select search=(action "asyncSearch") as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>Select with placeholder</h4>
  {{#ember-power-select options=(readonly simpleOptions) placeholder="Please select a number" as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>Select clearable</h4>
  {{#ember-power-select options=(readonly complexOptions) searchField="name" allowClear=true as |option|}}
    {{option.code}}: {{option.name}}
  {{/ember-power-select}}

  <h4>Select multiple [WORK IN PROGRESS]</h4>
  {{#ember-power-select options=(readonly simpleOptions) selected=multipleSelection multiple=true onchange=(action (mut multipleSelection)) as |option|}}
    {{option}}
  {{/ember-power-select}}
  <p>Selected numbers: {{#each multipleSelection as |number|}}{{number}}, {{/each}}</p>

  <h4>Select multiple </h4>
  {{#ember-power-select options=(readonly complexOptions) multiple=true searchField="name" as |option|}}
    <i class="icon-flag {{option.code}}"></i> {{option.name}}
  {{/ember-power-select}}
  <p>Selected numbers: {{#each multipleSelection as |number|}}{{number}}, {{/each}}</p>

  <h4>Custom block. When your options are not strings, just customize the html of each option with a block</h4>
  {{#ember-power-select options=(readonly complexOptions) searchField="name" selected=(readonly complexSelected) as |option|}}
    <i class="icon-flag {{option.code}}"></i>
    {{option.name}}
    <i>Population: {{option.population}}</i>
  {{/ember-power-select}}

  <h4>You can even use a different markup for the selected option and the ones in the list.</h4>
  {{#ember-power-select options=(readonly complexOptions) searchField="name" selected=(readonly complexSelected) selectedPartial="selected-country" as |option|}}
    <div class="country-detailed-info">
      <div class="country-flag {{option.code}}">
      </div>
      <div class="country-data-text">
        <strong>{{option.name}}</strong>
        <br>
        <small>Population in 2014: <i>{{option.population}}</i></small>
      </div>
    </div>
  {{/ember-power-select}}

  <h4>Select disabled</h4>
  {{#ember-power-select options=(readonly complexOptions) searchField="name" disabled=true as |option|}}
    {{option.code}}: {{option.name}}
  {{/ember-power-select}}

  <h4>Select with disabled options</h4>
  {{#ember-power-select options=(readonly complexOptionsWithDisabled) searchField="name" as |option|}}
    {{option.code}}: {{option.name}}
  {{/ember-power-select}}

  <h4>Select that receives a promise as options</h4>
  {{#ember-power-select options=(readonly promiseOptions) as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>You can customize the message shown while promise is not resolved with `loadingMessage="This promise takes 5 seconds to resolve"`</h4>
  {{#ember-power-select options=(readonly promiseOptions) loadingMessage="This promise takes 5 seconds to resolve" as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>You can customize the text being shown when there is no matches passing `noResultsMessage="404 bro". Type "asdf"`</h4>
  {{#ember-power-select options=(readonly simpleOptions) noResultsMessage="404 bro" as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>Or you can pass any html in the `\{{else}}` block just like each</h4>
  {{#ember-power-select options=(readonly simpleOptions) noResultsMessage="404 bro" as |option|}}
    {{option}}
  {{else}}
    <img height="130" style="display: inline-block;" src="http://cliparts.co/cliparts/bpi/qdj/bpiqdjdc9.png">
    NO
    <br>
    <a href="#">Contact us to complain about this</a>
  {{/ember-power-select}}

  <h4>Select with groups</h4>
  {{#ember-power-select options=(readonly groupedOptions) as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>Options are appended to the body, unless you pass `renderInPlace=true`</h4>
  {{#ember-power-select options=(readonly simpleOptions) renderInPlace=true as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>The search box can be disabled passing `searchEnabled=false`</h4>
  {{#ember-power-select options=(readonly simpleOptions) searchEnabled=false as |option|}}
    {{option}}
  {{/ember-power-select}}

  <h4>Right to left styles</h4>
  {{#ember-power-select options=(readonly complexOptions) dir="rtl" selected=(readonly complexSelected) allowClear=true as |option|}}
    {{option.code}}: {{option.name}}
  {{/ember-power-select}}
  <br>
  {{#ember-power-select options=(readonly groupedOptions) dir="rtl" selected="seven" allowClear=true as |option|}}
    {{option}}
  {{/ember-power-select}}
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
  <br>
 --}}
</section>