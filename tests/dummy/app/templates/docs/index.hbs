<h1 class="doc-page-title">Overview</h1>

<p>
  Selects. Almost all web application out there have selects on one way or another. A piece of
  UI that allows the user to choose one option among a list of them.
</p>

<p>
  Browsers always had a <code>select</code> tag but it is very limited. They can only
  display plain text, they look totally different in each browser and you can't reliably
  style them, so devs have built their own selects components to bypass all this limitations.
</p>

<p>
  Two good examples of jQuery plugins that did a great job are <a href="http://brianreavis.github.io/selectize.js">Selectize.js</a>
  and <a href="https://select2.github.io/">Select2</a>, that solve the styling issues while
  allowing features that the original tag can't have.
</p>

<p>
  But even being two solid pieces of engineering they are fundamentally flawed when it comes to
  play with frontend frameworks like Ember.js. Those libraries have an imperative API designed to
  append a component to an otherwise existing HTML document, with HTML in mind.
</p>

<p>
  In ember apps however we don't think in terms of nodes and tags but in terms of data and templates.
  The translations between those two visions, even if possible (two good examples of prior art are
  <a href="https://github.com/iStefo/ember-select-2">ember-select2</a> and
  <a href="https://github.com/miguelcobain/ember-cli-selectize">ember-cli-selectize</a>), involves
  a significant amount of glue code and prevents us to take advantage of ember's primitives.
</p>

<p>
  This projects aims to build a select component that has all the features of those existing libraries
  but allows to you to leverage Ember's primitives.
</p>

<p>Let's see how.</p>

<div class="doc-page-nav">
  {{#link-to 'docs.installation' class="doc-page-nav-link-next"}}Installation &gt;{{/link-to}}
</div>