<h1 class="doc-page-title">Action handling</h1>

<p>
  Ember power select aims to be maximally flexible and because of that it doesn't try to make strong
  assumptions about how you want to use it. Instead it embraces DDAU <em>(Data Down Actions Up)</em> philosophy
  of Ember 2.0 so data flow always is unidirectional and explicit.
</p>

<p>
  Data changes that occur in the component are not propagated to the outside using double bindings,
  but rather they are communicated via actions. The main action you're going to use is the <code>onchange</code>
  action. This action will fire whenever an option of the component's list if selected.
</p>

<p>
  The most common use case when you want changes inside a component to do something on its context
  an expressed this way:
</p>


{{#code-sample as |component|}}
  <pre class="code-sample-snippet template {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select selected=destination options=cities onchange=(action "chooseDestination") as |name|}}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet javascript {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      cities: ['Barcelona', 'London', 'New York', 'Porto'],
      destination: 'London',

      actions: {
        chooseDestination(city) {
          this.set('destination', city);
          // this.calculateRoute();
          // this.updatePrice();
        }
      }
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select selected=destination options=cities onchange=(action "chooseDestination") as |name|}}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  That gives you the freedom of doing whatever suits your need when the user selects a value. <br>
  If the only thing you want to do is updating the value, you can make it more concise using the
  <code>mut</code> helper.
</p>

{{#code-sample as |component|}}
  <pre class="code-sample-snippet template {{if (eq component.activeTab 'template') 'active'}}">
    \{{#power-select selected=destination options=cities onchange=(action (mut destination)) as |name|}}
      \{{name}}
    \{{/power-select}}
  </pre>
  <pre class="code-sample-snippet javascript {{if (eq component.activeTab 'javascript') 'active'}}">
    export default Ember.Controller.extend({
      cities: ['Barcelona', 'London', 'New York', 'Porto'],
      destination: 'London'
    });
  </pre>
  <div class="code-sample-snippet result {{if (eq component.activeTab 'result') 'active'}}">
    {{#power-select selected=destination options=cities onchange=(action (mut destination)) as |name|}}
      {{name}}
    {{/power-select}}
  </div>
{{/code-sample}}

<p>
  It might seem a bit more verbose at first for this, the simplest use case possible, but
  it simplifies a lot the mental model and enables some advanced usages that would otherwise be
  very tricky to implement.
</p>

<p>
  Have I mentioned that your can also render groups?
</p>

<div class="doc-page-nav">
  {{#link-to 'docs.how-to-use-it' class="doc-page-nav-link-prev"}}&lt; How to use it{{/link-to}}
  {{#link-to 'docs.groups' class="doc-page-nav-link-next"}}Groups &gt;{{/link-to}}
</div>